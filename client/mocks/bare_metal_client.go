package mocks

import "github.com/stretchr/testify/mock"

import "github.com/MustWin/baremetal-sdk-go"

// BareMetalClient is an autogenerated mock type for the BareMetalClient type
type BareMetalClient struct {
	mock.Mock
}

// AttachVolume provides a mock function with given fields: compartmentID, instanceID, attachmentType, volumeID, opts
func (_m *BareMetalClient) AttachVolume(compartmentID string, instanceID string, attachmentType string, volumeID string, opts ...baremetal.Options) (*baremetal.VolumeAttachment, error) {
	ret := _m.Called(compartmentID, instanceID, attachmentType, volumeID, opts)

	var r0 *baremetal.VolumeAttachment
	if rf, ok := ret.Get(0).(func(string, string, string, string, ...baremetal.Options) *baremetal.VolumeAttachment); ok {
		r0 = rf(compartmentID, instanceID, attachmentType, volumeID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.VolumeAttachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, instanceID, attachmentType, volumeID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CaptureConsoleHistory provides a mock function with given fields: instanceID, opts
func (_m *BareMetalClient) CaptureConsoleHistory(instanceID string, opts ...baremetal.Options) (*baremetal.ConsoleHistoryMetadata, error) {
	ret := _m.Called(instanceID, opts)

	var r0 *baremetal.ConsoleHistoryMetadata
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.ConsoleHistoryMetadata); ok {
		r0 = rf(instanceID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ConsoleHistoryMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(instanceID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCompartment provides a mock function with given fields: name, description, options
func (_m *BareMetalClient) CreateCompartment(name string, description string, options ...baremetal.Options) (*baremetal.IdentityResource, error) {
	ret := _m.Called(name, description, options)

	var r0 *baremetal.IdentityResource
	if rf, ok := ret.Get(0).(func(string, string, ...baremetal.Options) *baremetal.IdentityResource); ok {
		r0 = rf(name, description, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IdentityResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...baremetal.Options) error); ok {
		r1 = rf(name, description, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCpe provides a mock function with given fields: compartmentID, displayName, IPAddress, opts
func (_m *BareMetalClient) CreateCpe(compartmentID string, displayName string, IPAddress string, opts ...baremetal.Options) (*baremetal.Cpe, error) {
	ret := _m.Called(compartmentID, displayName, IPAddress, opts)

	var r0 *baremetal.Cpe
	if rf, ok := ret.Get(0).(func(string, string, string, ...baremetal.Options) *baremetal.Cpe); ok {
		r0 = rf(compartmentID, displayName, IPAddress, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Cpe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, displayName, IPAddress, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDrg provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) CreateDrg(compartmentID string, opts ...baremetal.Options) (*baremetal.Drg, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.Drg
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.Drg); ok {
		r0 = rf(compartmentID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Drg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDrgAttachment provides a mock function with given fields: compartmentID, drgID, vcnID, opts
func (_m *BareMetalClient) CreateDrgAttachment(compartmentID string, drgID string, vcnID string, opts ...baremetal.Options) (*baremetal.DrgAttachment, error) {
	ret := _m.Called(compartmentID, drgID, vcnID, opts)

	var r0 *baremetal.DrgAttachment
	if rf, ok := ret.Get(0).(func(string, string, string, ...baremetal.Options) *baremetal.DrgAttachment); ok {
		r0 = rf(compartmentID, drgID, vcnID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.DrgAttachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, drgID, vcnID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: name, description, options
func (_m *BareMetalClient) CreateGroup(name string, description string, options ...baremetal.Options) (*baremetal.IdentityResource, error) {
	ret := _m.Called(name, description, options)

	var r0 *baremetal.IdentityResource
	if rf, ok := ret.Get(0).(func(string, string, ...baremetal.Options) *baremetal.IdentityResource); ok {
		r0 = rf(name, description, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IdentityResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...baremetal.Options) error); ok {
		r1 = rf(name, description, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIPSecConnection provides a mock function with given fields: compartmentID, cpeID, drgID, staticRoutes, opts
func (_m *BareMetalClient) CreateIPSecConnection(compartmentID string, cpeID string, drgID string, staticRoutes []string, opts ...baremetal.Options) (*baremetal.IPSecConnection, error) {
	ret := _m.Called(compartmentID, cpeID, drgID, staticRoutes, opts)

	var r0 *baremetal.IPSecConnection
	if rf, ok := ret.Get(0).(func(string, string, string, []string, ...baremetal.Options) *baremetal.IPSecConnection); ok {
		r0 = rf(compartmentID, cpeID, drgID, staticRoutes, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IPSecConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, []string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, cpeID, drgID, staticRoutes, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImage provides a mock function with given fields: compartmentID, instanceID, opts
func (_m *BareMetalClient) CreateImage(compartmentID string, instanceID string, opts ...baremetal.Options) (*baremetal.Image, error) {
	ret := _m.Called(compartmentID, instanceID, opts)

	var r0 *baremetal.Image
	if rf, ok := ret.Get(0).(func(string, string, ...baremetal.Options) *baremetal.Image); ok {
		r0 = rf(compartmentID, instanceID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, instanceID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInternetGateway provides a mock function with given fields: compartmentID, vcnID, isEnabled, opts
func (_m *BareMetalClient) CreateInternetGateway(compartmentID string, vcnID string, isEnabled bool, opts ...baremetal.Options) (*baremetal.InternetGateway, error) {
	ret := _m.Called(compartmentID, vcnID, isEnabled, opts)

	var r0 *baremetal.InternetGateway
	if rf, ok := ret.Get(0).(func(string, string, bool, ...baremetal.Options) *baremetal.InternetGateway); ok {
		r0 = rf(compartmentID, vcnID, isEnabled, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.InternetGateway)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, vcnID, isEnabled, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrResetUIPassword provides a mock function with given fields: userID, opts
func (_m *BareMetalClient) CreateOrResetUIPassword(userID string, opts ...baremetal.Options) (*baremetal.UIPassword, error) {
	ret := _m.Called(userID, opts)

	var r0 *baremetal.UIPassword
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.UIPassword); ok {
		r0 = rf(userID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.UIPassword)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(userID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePolicy provides a mock function with given fields: name, description, statements, opts
func (_m *BareMetalClient) CreatePolicy(name string, description string, statements []string, opts ...baremetal.Options) (*baremetal.Policy, error) {
	ret := _m.Called(name, description, statements, opts)

	var r0 *baremetal.Policy
	if rf, ok := ret.Get(0).(func(string, string, []string, ...baremetal.Options) *baremetal.Policy); ok {
		r0 = rf(name, description, statements, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []string, ...baremetal.Options) error); ok {
		r1 = rf(name, description, statements, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRouteTable provides a mock function with given fields: compartmentID, vcnID, routeRules, opts
func (_m *BareMetalClient) CreateRouteTable(compartmentID string, vcnID string, routeRules []baremetal.RouteRule, opts ...baremetal.Options) (*baremetal.RouteTable, error) {
	ret := _m.Called(compartmentID, vcnID, routeRules, opts)

	var r0 *baremetal.RouteTable
	if rf, ok := ret.Get(0).(func(string, string, []baremetal.RouteRule, ...baremetal.Options) *baremetal.RouteTable); ok {
		r0 = rf(compartmentID, vcnID, routeRules, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.RouteTable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []baremetal.RouteRule, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, vcnID, routeRules, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubnet provides a mock function with given fields: availabilityDomain, cidrBlock, compartmentID, routeTableID, vcnID, securityListIDs, opts
func (_m *BareMetalClient) CreateSubnet(availabilityDomain string, cidrBlock string, compartmentID string, routeTableID string, vcnID string, securityListIDs []string, opts ...baremetal.Options) (*baremetal.Subnet, error) {
	ret := _m.Called(availabilityDomain, cidrBlock, compartmentID, routeTableID, vcnID, securityListIDs, opts)

	var r0 *baremetal.Subnet
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, []string, ...baremetal.Options) *baremetal.Subnet); ok {
		r0 = rf(availabilityDomain, cidrBlock, compartmentID, routeTableID, vcnID, securityListIDs, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Subnet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, []string, ...baremetal.Options) error); ok {
		r1 = rf(availabilityDomain, cidrBlock, compartmentID, routeTableID, vcnID, securityListIDs, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: name, description, options
func (_m *BareMetalClient) CreateUser(name string, description string, options ...baremetal.Options) (*baremetal.IdentityResource, error) {
	ret := _m.Called(name, description, options)

	var r0 *baremetal.IdentityResource
	if rf, ok := ret.Get(0).(func(string, string, ...baremetal.Options) *baremetal.IdentityResource); ok {
		r0 = rf(name, description, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IdentityResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...baremetal.Options) error); ok {
		r1 = rf(name, description, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVirtualNetwork provides a mock function with given fields: cidrBlock, compartmentID, opts
func (_m *BareMetalClient) CreateVirtualNetwork(cidrBlock string, compartmentID string, opts ...baremetal.Options) (*baremetal.VirtualNetwork, error) {
	ret := _m.Called(cidrBlock, compartmentID, opts)

	var r0 *baremetal.VirtualNetwork
	if rf, ok := ret.Get(0).(func(string, string, ...baremetal.Options) *baremetal.VirtualNetwork); ok {
		r0 = rf(cidrBlock, compartmentID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.VirtualNetwork)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...baremetal.Options) error); ok {
		r1 = rf(cidrBlock, compartmentID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVolume provides a mock function with given fields: availabiltyDomain, compartmentID, opts
func (_m *BareMetalClient) CreateVolume(availabiltyDomain string, compartmentID string, opts ...baremetal.Options) (*baremetal.Volume, error) {
	ret := _m.Called(availabiltyDomain, compartmentID, opts)

	var r0 *baremetal.Volume
	if rf, ok := ret.Get(0).(func(string, string, ...baremetal.Options) *baremetal.Volume); ok {
		r0 = rf(availabiltyDomain, compartmentID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...baremetal.Options) error); ok {
		r1 = rf(availabiltyDomain, compartmentID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVolumeBackup provides a mock function with given fields: volumeID, opts
func (_m *BareMetalClient) CreateVolumeBackup(volumeID string, opts ...baremetal.Options) (*baremetal.VolumeBackup, error) {
	ret := _m.Called(volumeID, opts)

	var r0 *baremetal.VolumeBackup
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.VolumeBackup); ok {
		r0 = rf(volumeID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.VolumeBackup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(volumeID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAPIKey provides a mock function with given fields: userID, fingerprint, opts
func (_m *BareMetalClient) DeleteAPIKey(userID string, fingerprint string, opts ...baremetal.Options) error {
	ret := _m.Called(userID, fingerprint, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, ...baremetal.Options) error); ok {
		r0 = rf(userID, fingerprint, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteConsoleHistory provides a mock function with given fields: id
func (_m *BareMetalClient) DeleteConsoleHistory(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCpe provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteCpe(id string, opts ...baremetal.Options) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(id, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDrg provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteDrg(id string, opts ...baremetal.Options) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(id, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDrgAttachment provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteDrgAttachment(id string, opts ...baremetal.Options) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(id, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGroup provides a mock function with given fields: userID, opts
func (_m *BareMetalClient) DeleteGroup(userID string, opts ...baremetal.Options) error {
	ret := _m.Called(userID, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(userID, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIPSecConnection provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteIPSecConnection(id string, opts ...baremetal.Options) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(id, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteImage provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteImage(id string, opts ...baremetal.Options) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(id, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInternetGateway provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteInternetGateway(id string, opts ...baremetal.Options) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(id, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePolicy provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeletePolicy(id string, opts ...baremetal.Options) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(id, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRouteTable provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteRouteTable(id string, opts ...baremetal.Options) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(id, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubnet provides a mock function with given fields: subnetID, opts
func (_m *BareMetalClient) DeleteSubnet(subnetID string, opts ...baremetal.Options) error {
	ret := _m.Called(subnetID, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(subnetID, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: userID, opts
func (_m *BareMetalClient) DeleteUser(userID string, opts ...baremetal.Options) error {
	ret := _m.Called(userID, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(userID, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVirtualNetwork provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteVirtualNetwork(id string, opts ...baremetal.Options) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(id, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVolume provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteVolume(id string, opts ...baremetal.Options) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(id, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVolumeBackup provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteVolumeBackup(id string, opts ...baremetal.Options) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(id, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetachVolume provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DetachVolume(id string, opts ...baremetal.Options) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(id, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCompartment provides a mock function with given fields: userID
func (_m *BareMetalClient) GetCompartment(userID string) (*baremetal.IdentityResource, error) {
	ret := _m.Called(userID)

	var r0 *baremetal.IdentityResource
	if rf, ok := ret.Get(0).(func(string) *baremetal.IdentityResource); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IdentityResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsoleHistory provides a mock function with given fields: id, opts
func (_m *BareMetalClient) GetConsoleHistory(id string, opts ...baremetal.Options) (*baremetal.ConsoleHistoryMetadata, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.ConsoleHistoryMetadata
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.ConsoleHistoryMetadata); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ConsoleHistoryMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCpe provides a mock function with given fields: id, opts
func (_m *BareMetalClient) GetCpe(id string, opts ...baremetal.Options) (*baremetal.Cpe, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.Cpe
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.Cpe); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Cpe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDrg provides a mock function with given fields: id, opts
func (_m *BareMetalClient) GetDrg(id string, opts ...baremetal.Options) (*baremetal.Drg, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.Drg
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.Drg); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Drg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDrgAttachment provides a mock function with given fields: id, opts
func (_m *BareMetalClient) GetDrgAttachment(id string, opts ...baremetal.Options) (*baremetal.DrgAttachment, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.DrgAttachment
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.DrgAttachment); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.DrgAttachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroup provides a mock function with given fields: userID
func (_m *BareMetalClient) GetGroup(userID string) (*baremetal.IdentityResource, error) {
	ret := _m.Called(userID)

	var r0 *baremetal.IdentityResource
	if rf, ok := ret.Get(0).(func(string) *baremetal.IdentityResource); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IdentityResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPSecConnection provides a mock function with given fields: id
func (_m *BareMetalClient) GetIPSecConnection(id string) (*baremetal.IPSecConnection, error) {
	ret := _m.Called(id)

	var r0 *baremetal.IPSecConnection
	if rf, ok := ret.Get(0).(func(string) *baremetal.IPSecConnection); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IPSecConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPSecConnectionDeviceConfig provides a mock function with given fields: id
func (_m *BareMetalClient) GetIPSecConnectionDeviceConfig(id string) (*baremetal.IPSecConnectionDeviceConfig, error) {
	ret := _m.Called(id)

	var r0 *baremetal.IPSecConnectionDeviceConfig
	if rf, ok := ret.Get(0).(func(string) *baremetal.IPSecConnectionDeviceConfig); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IPSecConnectionDeviceConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPSecConnectionDeviceStatus provides a mock function with given fields: id
func (_m *BareMetalClient) GetIPSecConnectionDeviceStatus(id string) (*baremetal.IPSecConnectionDeviceStatus, error) {
	ret := _m.Called(id)

	var r0 *baremetal.IPSecConnectionDeviceStatus
	if rf, ok := ret.Get(0).(func(string) *baremetal.IPSecConnectionDeviceStatus); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IPSecConnectionDeviceStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImage provides a mock function with given fields: id, opts
func (_m *BareMetalClient) GetImage(id string, opts ...baremetal.Options) (*baremetal.Image, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.Image
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.Image); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstance provides a mock function with given fields: instanceID
func (_m *BareMetalClient) GetInstance(instanceID string) (*baremetal.Instance, error) {
	ret := _m.Called(instanceID)

	var r0 *baremetal.Instance
	if rf, ok := ret.Get(0).(func(string) *baremetal.Instance); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Instance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInternetGateway provides a mock function with given fields: id
func (_m *BareMetalClient) GetInternetGateway(id string) (*baremetal.InternetGateway, error) {
	ret := _m.Called(id)

	var r0 *baremetal.InternetGateway
	if rf, ok := ret.Get(0).(func(string) *baremetal.InternetGateway); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.InternetGateway)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: id
func (_m *BareMetalClient) GetPolicy(id string) (*baremetal.Policy, error) {
	ret := _m.Called(id)

	var r0 *baremetal.Policy
	if rf, ok := ret.Get(0).(func(string) *baremetal.Policy); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRouteTable provides a mock function with given fields: id, opts
func (_m *BareMetalClient) GetRouteTable(id string, opts ...baremetal.Options) (*baremetal.RouteTable, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.RouteTable
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.RouteTable); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.RouteTable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubnet provides a mock function with given fields: subnetID
func (_m *BareMetalClient) GetSubnet(subnetID string) (*baremetal.Subnet, error) {
	ret := _m.Called(subnetID)

	var r0 *baremetal.Subnet
	if rf, ok := ret.Get(0).(func(string) *baremetal.Subnet); ok {
		r0 = rf(subnetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Subnet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subnetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: userID
func (_m *BareMetalClient) GetUser(userID string) (*baremetal.IdentityResource, error) {
	ret := _m.Called(userID)

	var r0 *baremetal.IdentityResource
	if rf, ok := ret.Get(0).(func(string) *baremetal.IdentityResource); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IdentityResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVirtualNetwork provides a mock function with given fields: id, opts
func (_m *BareMetalClient) GetVirtualNetwork(id string, opts ...baremetal.Options) (*baremetal.VirtualNetwork, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.VirtualNetwork
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.VirtualNetwork); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.VirtualNetwork)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVnic provides a mock function with given fields: vnicID
func (_m *BareMetalClient) GetVnic(vnicID string) (*baremetal.Vnic, error) {
	ret := _m.Called(vnicID)

	var r0 *baremetal.Vnic
	if rf, ok := ret.Get(0).(func(string) *baremetal.Vnic); ok {
		r0 = rf(vnicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Vnic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(vnicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolume provides a mock function with given fields: id, opts
func (_m *BareMetalClient) GetVolume(id string, opts ...baremetal.Options) (*baremetal.Volume, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.Volume
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.Volume); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeAttachment provides a mock function with given fields: id, opts
func (_m *BareMetalClient) GetVolumeAttachment(id string, opts ...baremetal.Options) (*baremetal.VolumeAttachment, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.VolumeAttachment
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.VolumeAttachment); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.VolumeAttachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeBackup provides a mock function with given fields: id, opts
func (_m *BareMetalClient) GetVolumeBackup(id string, opts ...baremetal.Options) (*baremetal.VolumeBackup, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.VolumeBackup
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.VolumeBackup); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.VolumeBackup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchInstance provides a mock function with given fields: availabilityDomain, compartmentID, image, shape, subnetID, metadata, opts
func (_m *BareMetalClient) LaunchInstance(availabilityDomain string, compartmentID string, image string, shape string, subnetID string, metadata map[string]string, opts ...baremetal.Options) (*baremetal.Instance, error) {
	ret := _m.Called(availabilityDomain, compartmentID, image, shape, subnetID, metadata, opts)

	var r0 *baremetal.Instance
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, map[string]string, ...baremetal.Options) *baremetal.Instance); ok {
		r0 = rf(availabilityDomain, compartmentID, image, shape, subnetID, metadata, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Instance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, map[string]string, ...baremetal.Options) error); ok {
		r1 = rf(availabilityDomain, compartmentID, image, shape, subnetID, metadata, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAPIKeys provides a mock function with given fields: userID
func (_m *BareMetalClient) ListAPIKeys(userID string) (*baremetal.ListAPIKeyResponses, error) {
	ret := _m.Called(userID)

	var r0 *baremetal.ListAPIKeyResponses
	if rf, ok := ret.Get(0).(func(string) *baremetal.ListAPIKeyResponses); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListAPIKeyResponses)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCpes provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListCpes(compartmentID string, opts ...baremetal.Options) (*baremetal.ListCpes, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListCpes
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.ListCpes); ok {
		r0 = rf(compartmentID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListCpes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDrgAttachments provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListDrgAttachments(compartmentID string, opts ...baremetal.Options) (*baremetal.ListDrgAttachments, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListDrgAttachments
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.ListDrgAttachments); ok {
		r0 = rf(compartmentID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListDrgAttachments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDrgs provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListDrgs(compartmentID string, opts ...baremetal.Options) (*baremetal.ListDrgs, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListDrgs
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.ListDrgs); ok {
		r0 = rf(compartmentID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListDrgs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIPSecConnections provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListIPSecConnections(compartmentID string, opts ...baremetal.Options) (*baremetal.ListIPSecConnections, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListIPSecConnections
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.ListIPSecConnections); ok {
		r0 = rf(compartmentID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListIPSecConnections)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImages provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListImages(compartmentID string, opts ...baremetal.Options) (*baremetal.ListImages, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListImages
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.ListImages); ok {
		r0 = rf(compartmentID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListImages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstances provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListInstances(compartmentID string, opts ...baremetal.Options) (*baremetal.ListInstances, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListInstances
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.ListInstances); ok {
		r0 = rf(compartmentID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListInstances)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInternetGateways provides a mock function with given fields: compartmentID, vcnID, opts
func (_m *BareMetalClient) ListInternetGateways(compartmentID string, vcnID string, opts ...baremetal.Options) (*baremetal.ListInternetGateways, error) {
	ret := _m.Called(compartmentID, vcnID, opts)

	var r0 *baremetal.ListInternetGateways
	if rf, ok := ret.Get(0).(func(string, string, ...baremetal.Options) *baremetal.ListInternetGateways); ok {
		r0 = rf(compartmentID, vcnID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListInternetGateways)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, vcnID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRouteTables provides a mock function with given fields: compartmentID, vcnID, opts
func (_m *BareMetalClient) ListRouteTables(compartmentID string, vcnID string, opts ...baremetal.Options) (*baremetal.ListRouteTables, error) {
	ret := _m.Called(compartmentID, vcnID, opts)

	var r0 *baremetal.ListRouteTables
	if rf, ok := ret.Get(0).(func(string, string, ...baremetal.Options) *baremetal.ListRouteTables); ok {
		r0 = rf(compartmentID, vcnID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListRouteTables)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, vcnID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListShapes provides a mock function with given fields: compartmentID, opt
func (_m *BareMetalClient) ListShapes(compartmentID string, opt ...baremetal.Options) (*baremetal.ListShapes, error) {
	ret := _m.Called(compartmentID, opt)

	var r0 *baremetal.ListShapes
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.ListShapes); ok {
		r0 = rf(compartmentID, opt...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListShapes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, opt...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubnets provides a mock function with given fields: compartmentID, vcnID, opts
func (_m *BareMetalClient) ListSubnets(compartmentID string, vcnID string, opts ...baremetal.Options) (*baremetal.ListSubnets, error) {
	ret := _m.Called(compartmentID, vcnID, opts)

	var r0 *baremetal.ListSubnets
	if rf, ok := ret.Get(0).(func(string, string, ...baremetal.Options) *baremetal.ListSubnets); ok {
		r0 = rf(compartmentID, vcnID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListSubnets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, vcnID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVirtualNetworks provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListVirtualNetworks(compartmentID string, opts ...baremetal.Options) (*baremetal.ListVirtualNetworks, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListVirtualNetworks
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.ListVirtualNetworks); ok {
		r0 = rf(compartmentID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListVirtualNetworks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVnicAttachments provides a mock function with given fields: compartmentID, opt
func (_m *BareMetalClient) ListVnicAttachments(compartmentID string, opt ...baremetal.Options) (*baremetal.ListVnicAttachments, error) {
	ret := _m.Called(compartmentID, opt)

	var r0 *baremetal.ListVnicAttachments
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.ListVnicAttachments); ok {
		r0 = rf(compartmentID, opt...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListVnicAttachments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, opt...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolumeAttachments provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListVolumeAttachments(compartmentID string, opts ...baremetal.Options) (*baremetal.ListVolumeAttachments, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListVolumeAttachments
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.ListVolumeAttachments); ok {
		r0 = rf(compartmentID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListVolumeAttachments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolumeBackups provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListVolumeBackups(compartmentID string, opts ...baremetal.Options) (*baremetal.ListVolumeBackups, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListVolumeBackups
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.ListVolumeBackups); ok {
		r0 = rf(compartmentID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListVolumeBackups)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolumes provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListVolumes(compartmentID string, opts ...baremetal.Options) (*baremetal.ListVolumes, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListVolumes
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.ListVolumes); ok {
		r0 = rf(compartmentID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListVolumes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(compartmentID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowConsoleHistoryData provides a mock function with given fields: instanceConsoleHistoryID, opts
func (_m *BareMetalClient) ShowConsoleHistoryData(instanceConsoleHistoryID string, opts ...baremetal.Options) (*baremetal.ConsoleHistoryData, error) {
	ret := _m.Called(instanceConsoleHistoryID, opts)

	var r0 *baremetal.ConsoleHistoryData
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.ConsoleHistoryData); ok {
		r0 = rf(instanceConsoleHistoryID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ConsoleHistoryData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(instanceConsoleHistoryID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateInstance provides a mock function with given fields: instanceID, opts
func (_m *BareMetalClient) TerminateInstance(instanceID string, opts ...baremetal.Options) error {
	ret := _m.Called(instanceID, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) error); ok {
		r0 = rf(instanceID, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCompartment provides a mock function with given fields: userID, userDescription, opts
func (_m *BareMetalClient) UpdateCompartment(userID string, userDescription string, opts ...baremetal.Options) (*baremetal.IdentityResource, error) {
	ret := _m.Called(userID, userDescription, opts)

	var r0 *baremetal.IdentityResource
	if rf, ok := ret.Get(0).(func(string, string, ...baremetal.Options) *baremetal.IdentityResource); ok {
		r0 = rf(userID, userDescription, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IdentityResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...baremetal.Options) error); ok {
		r1 = rf(userID, userDescription, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: userID, userDescription, opts
func (_m *BareMetalClient) UpdateGroup(userID string, userDescription string, opts ...baremetal.Options) (*baremetal.IdentityResource, error) {
	ret := _m.Called(userID, userDescription, opts)

	var r0 *baremetal.IdentityResource
	if rf, ok := ret.Get(0).(func(string, string, ...baremetal.Options) *baremetal.IdentityResource); ok {
		r0 = rf(userID, userDescription, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IdentityResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...baremetal.Options) error); ok {
		r1 = rf(userID, userDescription, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImage provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateImage(id string, opts ...baremetal.Options) (*baremetal.Image, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.Image
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.Image); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstance provides a mock function with given fields: instanceID, opts
func (_m *BareMetalClient) UpdateInstance(instanceID string, opts ...baremetal.Options) (*baremetal.Instance, error) {
	ret := _m.Called(instanceID, opts)

	var r0 *baremetal.Instance
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.Instance); ok {
		r0 = rf(instanceID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Instance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(instanceID, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInternetGateway provides a mock function with given fields: id, isEnabled, opts
func (_m *BareMetalClient) UpdateInternetGateway(id string, isEnabled bool, opts ...baremetal.Options) (*baremetal.InternetGateway, error) {
	ret := _m.Called(id, isEnabled, opts)

	var r0 *baremetal.InternetGateway
	if rf, ok := ret.Get(0).(func(string, bool, ...baremetal.Options) *baremetal.InternetGateway); ok {
		r0 = rf(id, isEnabled, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.InternetGateway)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, ...baremetal.Options) error); ok {
		r1 = rf(id, isEnabled, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePolicy provides a mock function with given fields: id, description, statements, opts
func (_m *BareMetalClient) UpdatePolicy(id string, description string, statements []string, opts ...baremetal.Options) (*baremetal.Policy, error) {
	ret := _m.Called(id, description, statements, opts)

	var r0 *baremetal.Policy
	if rf, ok := ret.Get(0).(func(string, string, []string, ...baremetal.Options) *baremetal.Policy); ok {
		r0 = rf(id, description, statements, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []string, ...baremetal.Options) error); ok {
		r1 = rf(id, description, statements, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRouteTable provides a mock function with given fields: id, routeRules, opts
func (_m *BareMetalClient) UpdateRouteTable(id string, routeRules []baremetal.RouteRule, opts ...baremetal.Options) (*baremetal.RouteTable, error) {
	ret := _m.Called(id, routeRules, opts)

	var r0 *baremetal.RouteTable
	if rf, ok := ret.Get(0).(func(string, []baremetal.RouteRule, ...baremetal.Options) *baremetal.RouteTable); ok {
		r0 = rf(id, routeRules, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.RouteTable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []baremetal.RouteRule, ...baremetal.Options) error); ok {
		r1 = rf(id, routeRules, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: userID, userDescription, opts
func (_m *BareMetalClient) UpdateUser(userID string, userDescription string, opts ...baremetal.Options) (*baremetal.IdentityResource, error) {
	ret := _m.Called(userID, userDescription, opts)

	var r0 *baremetal.IdentityResource
	if rf, ok := ret.Get(0).(func(string, string, ...baremetal.Options) *baremetal.IdentityResource); ok {
		r0 = rf(userID, userDescription, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IdentityResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...baremetal.Options) error); ok {
		r1 = rf(userID, userDescription, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVolume provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateVolume(id string, opts ...baremetal.Options) (*baremetal.Volume, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.Volume
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.Volume); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVolumeBackup provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateVolumeBackup(id string, opts ...baremetal.Options) (*baremetal.VolumeBackup, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.VolumeBackup
	if rf, ok := ret.Get(0).(func(string, ...baremetal.Options) *baremetal.VolumeBackup); ok {
		r0 = rf(id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.VolumeBackup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...baremetal.Options) error); ok {
		r1 = rf(id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadAPIKey provides a mock function with given fields: userID, key, opts
func (_m *BareMetalClient) UploadAPIKey(userID string, key string, opts ...baremetal.Options) (*baremetal.APIKey, error) {
	ret := _m.Called(userID, key, opts)

	var r0 *baremetal.APIKey
	if rf, ok := ret.Get(0).(func(string, string, ...baremetal.Options) *baremetal.APIKey); ok {
		r0 = rf(userID, key, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.APIKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...baremetal.Options) error); ok {
		r1 = rf(userID, key, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
